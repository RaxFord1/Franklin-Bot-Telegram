# -*- coding: utf-8 -*- p
#import
from telebot import TeleBot
import config
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
import time
import datetime
import os
import json

userinfo = ""
import pandas as pd
clients = [[123,[0,0,0,0,0,0,0], 0, 0, 0, 0, 0, ["–ò–º—è –§–∞–º–∏–ª–∏—è", "–ï–º–µ–π–ª", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"], 0, ["bot","instrument","bank","budushee","ne hvatilo"],[1,2,3,4,5,6,7], [1,2]]]
#[0] - id
#[1]- answers
#[2] - #question
#[3] - good/bad 1- good 2 - bad
#[4] - instrument
#[5] - bank
#[6] - call the meneger 1 - contact 2 - –ò–º—è/–§–∞–º–∏–ª–∏—è 3 - –ï–º–µ–π–ª 4 - –¢–µ–ª–µ—Ñ–æ–Ω
#[7] - [name/surname, email, telephone]
#[10] - time for answers
#[11] - [start/callMeneger]
question_time = {}


questions = [['–î–æ 25 üë∂','25-30 üë¶','30-45 üë®','–ë–æ–ª—å—à–µ 45 üßî'],
['–ú–µ–Ω—å—à–µ 1000$ üíµ','1000-3000$ üí∏','3000-5000$ üí∞','–ë–æ–ª—å—à–µ 5000$ üßæ'],
['–º–µ–Ω—å—à–µ 10% üåë','10-25% üåí','25-50% üåì','–±–æ–ª—å—à–µ 50% üåî'],
['–î–∞ üê£', '–ù–µ—Ç üçæ'],
['–ë–∞–ª–∞–Ω—Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ —Ä–∏—Å–∫–∞ ‚öñÔ∏è','–ë–æ–ª—å—à–∞—è –ø–æ–∫—É–ø–∫–∞ üöó','–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞üóÑ','–ë–µ–∑–±–µ–¥–Ω–∞—è —Å—Ç–∞—Ä–æ—Å—Ç—å üõÄüèª '],
['–î–∞ üé¢', '–ù–µ—Ç üé†'],
['–º–µ–Ω–µ–µ 1 –≥–æ–¥–∞ üïØ','1-3 –≥–æ–¥–∞ ‚è±','3-5 –ª–µ—Ç ‚è∞','–±–æ–ª–µ–µ 5 –ª–µ—Ç ‚è≥']]

'''

analitics = {
    "n_starts": 141,
    "n_callMeneger": 1,
    "analitics_feedback":1,
    "instruments":{
        "–î–µ–ø–æ–∑–∏—Ç":[7,103],
        "–û–í–ì–ó":[8,103],
        "–ü–ò–§":[10,103],
        "P2P":[15,75],
        "–ù–ü–§":[1,41],
        "IPO":[7,63]
    }
}
with open("analitics.json", "w", encoding="utf-8") as file:
    json.dump(analitics, file)
'''

'''
banks_analitics = {
"–ê–ª—å—Ñ–∞–ë–∞–Ω–∫":0,"–ê–≤–∞–ª—å–ë–∞–Ω–∫":0,"–û–¢–ü –ë–∞–Ω–∫":0,"ICU UAH/USD":0,"ICU UAH":0,
"Freedom Finance UAH/USD":1,"Freedom Finance UAH":1,"UNIVER UAH/USD":1,"UNIVER UAH":0,
"Dragon Capital UAH/USD":0,"Dragon UAH":0,"HUGS":4,"Univer":1,"ICU":0,"OTP Capital":1,
"–õ–∏–≥–∞ –ü–µ–Ω—Å–∏—è":0,"OTP":0,"Kinto":0,"Freedom Finance":1,"FinHub":8, "Monobank":1
}

with open("banks_analitics.json", "w", encoding="utf-8") as file:
    json.dump(banks_analitics, file)
'''

'''

qts = {
    "qt1":[0,0,0,0],
    "qt2":[0,0,0,0],
    "qt3":[0,0,0,0],
    "qt4":[0,0],
    "qt5":[0,0,0,0],
    "qt6":[0,0],
    "qt7":[0,0,0,0]
}

with open("questions.json", "w", encoding="utf-8") as file:
    json.dump(qts, file, ensure_ascii=False)
'''
with open('analitics.json') as json_file:
    analitics = json.load(json_file, encoding='utf-8')
    print(analitics)
with open('banks_analitics.json') as json_file:
    banks_analitics = json.load(json_file,  encoding='utf-8')
    print(banks_analitics)
with open('questions.json') as json_file:
    qts = json.load(json_file)
    print(qts)

question_time_analitics = [[],[],[],[],[],[],[]]
#print(question_time_analitics)
#print("####",question_time_analitics['qt1'])
"""= {
"–ê–ª—å—Ñ–∞–ë–∞–Ω–∫":[0],"–ê–≤–∞–ª—å–ë–∞–Ω–∫":[0],"–û–¢–ü –ë–∞–Ω–∫":[0],"ICU UAH/USD":[0],"ICU UAH":[0],
"Freedom Finance UAH/USD":[0],"Freedom Finance UAH":[0],"UNIVER UAH/USD":[0],"UNIVER UAH":[0],
"Dragon Capital UAH/USD":[0],"Dragon UAH":[0],"HUGS":[0],"Univer":[0],"ICU":[0],"OTP Capital":[0],
"–õ–∏–≥–∞ –ü–µ–Ω—Å–∏—è":[0],"OTP":[0],"Kinto":[0],"Freedom Finance":[0],"FinHub":[0], "Monobank":[0]
}"""
#instrument_analitics = {"–î–µ–ø–æ–∑–∏—Ç":[0], "–û–í–ì–ó":[0], "–ü–ò–§":[0], "P2P":[0],"–ù–ü–§":[0], "IPO":[0]}


callback_analitics = [{}, {}, {}, {}]




#bot creating
TOKEN = "1061044668:AAG9GvEyVTgXcrKsl927zzrr1Zmzg6WMca8"

bot = TeleBot(TOKEN)

def send_every24():
    result_string = "–ö–æ–ª–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞: {}\n".format(n_starts)
    result_string += "–ö–æ–ª–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –æ–±—Ä–∞–Ω–æ–π —Å–≤—è–∑–∏: {}\n".format(analitics["n_callMeneger"])
    bot.send_message(message.chat.id, result_string)


def edit_good(answers):
    analitics["instruments"]["–î–µ–ø–æ–∑–∏—Ç"][1] += answers["–î–µ–ø–æ–∑–∏—Ç"]
    analitics["instruments"]["–û–í–ì–ó"][1] += answers["–û–í–ì–ó"]
    analitics["instruments"]["–ü–ò–§"][1] += answers["–ü–ò–§"]
    analitics["instruments"]["P2P"][1] += answers["P2P"]
    analitics["instruments"]["–ù–ü–§"][1] += answers["–ù–ü–§"]
    analitics["instruments"]["IPO"][1] += answers["IPO"]


#bot handlers/settings
@bot.message_handler(commands=['start', 'info', 'analitics'])
def commands(message):
    msg = message.json["text"]
    found = False
    call = message
    client = [message.chat.id, [msg,0,0,0,0,0,0], 0, 0, 0, 0, 0, ["–ò–º—è –§–∞–º–∏–ª–∏—è", "–ï–º–µ–π–ª", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"], 0, ["bot","instrument","bank","budushee","ne hvatilo"], [1,2,3,4,5,6,7]]
    client_id = None
    if message.json['text'] == '/info':
        text = """–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ü§ë
–°–µ–π—á–∞—Å –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —Ç—ã –æ–±–Ω–∞—Ä—É–∂–∏—à—å –∫–∞–∫–∏–µ-—Ç–æ –±–∞–≥–∏, —Å–º–µ–ª–æ –ø–∏—à–∏ –Ω–∞ @Franklin_faq ‚ùóÔ∏è\n–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏ /start!"""
        bot.send_message(message.chat.id, text)

    for j,i in enumerate(clients):

        if i[0] == message.chat.id:
            found = True
            client = i
            client_id = j
            break

    if not found:
        analitics["n_starts"] += 1
        client_id = len(clients)
        clients.append(client)
        clients[client_id][1] = client[1]
        clients[client_id][2] = client[2]
    #–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∑–∞—è–≤–∫—É
    if message.json['text'] == "/start":
        if not found:
            analitics["n_starts"] += 1
            #clients[client_id][11][0] = time.time()"""
        clients[client_id][8] = 0
        clients[client_id][6] = 0
        clients[client_id][5] = 0
        clients[client_id][4] = 0
        clients[client_id][3] = 0
        clients[client_id][2] = 1
        clients[client_id][1] = [0,0,0,0,0,0,0]
        question_time[message.chat.id] = int(time.time())
        config.StartQuiz(message)


    elif message.json["text"] == "/analitics":
        result_string = "–ö–æ–ª–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞: {}\n".format(analitics["n_starts"])
        result_string += "–ö–æ–ª–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –æ–±—Ä–∞–Ω–æ–π —Å–≤—è–∑–∏: {}\n".format(analitics["n_callMeneger"])
        result_string += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:\n"
        result_string += "–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?\n"
        result_string += "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {} —Å–µ–∫—É–Ω–¥\n".format(sum(question_time_analitics[0])/len(question_time_analitics[0]))

        for j, i in enumerate(qts['qt1']):
            result_string+= "    –û—Ç–≤–µ—Ç {} : {}\n".format(questions[0][j], i)

        result_string += "–ö–∞–∫—É—é —Å—É–º–º—É –í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?\n"
        result_string += "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {} —Å–µ–∫—É–Ω–¥\n".format(sum(question_time_analitics[1])/len(question_time_analitics[1]))
        for j, i in enumerate(qts['qt2']):
            result_string+= "    –û—Ç–≤–µ—Ç {} : {}\n".format(questions[1][j], i)

        result_string += "–ö–∞–∫—É—é —á–∞—Å—Ç—å –æ—Ç —Å–≤–æ–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –í—ã –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ?\n"
        result_string += "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {} —Å–µ–∫—É–Ω–¥\n".format(sum(question_time_analitics[2])/len(question_time_analitics[2]))
        for j, i in enumerate(qts['qt3']):
            result_string+= "    –û—Ç–≤–µ—Ç {} : {}\n".format(questions[2][j], i)

        result_string += "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –î–µ—Ç–∏?:\n"
        result_string += "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {} —Å–µ–∫—É–Ω–¥\n".format(sum(question_time_analitics[3])/len(question_time_analitics[3]))
        for j, i in enumerate(qts['qt4']):
            result_string+= "    –û—Ç–≤–µ—Ç {} : {}\n".format(questions[3][j], i)

        result_string += "–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –í–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?\n"
        result_string += "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {} —Å–µ–∫—É–Ω–¥\n".format(sum(question_time_analitics[4])/len(question_time_analitics[4]))
        for j, i in enumerate(qts['qt5']):
            result_string+= "    –û—Ç–≤–µ—Ç {} : {}\n".format(questions[4][j], i)

        result_string += "–ì–æ—Ç–æ–≤—ã –ª–∏ –í—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–∏—Å–∫–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã?\n"
        result_string += "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {} —Å–µ–∫—É–Ω–¥\n".format(sum(question_time_analitics[5])/len(question_time_analitics[5]))
        for j, i in enumerate(qts['qt6']):
            result_string+= "    –û—Ç–≤–µ—Ç {} : {}\n".format(questions[5][j], i)

        result_string += "–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –í—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:\n"
        result_string += "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {} —Å–µ–∫—É–Ω–¥\n".format(sum(question_time_analitics[6])/len(question_time_analitics[6]))
        for j, i in enumerate(qts['qt7']):
            result_string+= "    –û—Ç–≤–µ—Ç {} : {}\n".format(questions[6][j], i)
        bot.send_message(message.chat.id, result_string)

        result_string = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:\n"
        for i in analitics["instruments"]:
            result_string += "   {}   –≤—ã–±—Ä–∞–Ω–æ —Ä–∞–∑: {}\n".format(i, analitics["instruments"][i][0])
            result_string += "   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Ä–∞–∑: {}\n".format(analitics["instruments"][i][1])

        bot.send_message(message.chat.id, result_string)

        result_string = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º:\n"
        for i in banks_analitics:
            result_string += "   {}   –≤—ã–±—Ä–∞–Ω–æ —Ä–∞–∑: {}\n".format(i, banks_analitics[i])

        bot.send_message(message.chat.id, result_string)

        result_string = "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"

        result_string += "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±—ã–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö?\n"
        for j in callback_analitics[0]:
                result_string += "{}  –≤—ã–±—Ä–∞–Ω–æ —Ä–∞–∑: {}\n".format(j, callback_analitics[0][j])

        result_string += "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±—ã–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∫–æ–º–∞–Ω–∏—è—Ö?\n"
        for j in callback_analitics[0]:
                result_string += "{}  –≤—ã–±—Ä–∞–Ω–æ —Ä–∞–∑: {}\n".format(j, callback_analitics[0][j])

        result_string += "–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è/–≤–æ—Å–ø–æ–ª—å–∑—É–µ—à—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–ø–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–ø–∏—Å–∞–Ω—ã –≤—ã—à–µ?\n"
        for j in callback_analitics[0]:
                result_string += "{}  –≤—ã–±—Ä–∞–Ω–æ —Ä–∞–∑: {}\n".format(j, callback_analitics[0][j])

        bot.send_message(message.chat.id, result_string)

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    pass



@bot.message_handler(content_types=['text'])
def echo_id(message):
    if message.chat.type == "group":
        pass

    elif message.chat.type == "private":
        process(message)

        with open("analitics.json", "w", encoding="utf-8") as file:
            json.dump(analitics, file)
        with open("banks_analitics.json", "w", encoding="utf-8") as file:
            json.dump(banks_analitics, file)
        with open("questions.json", "w", encoding="utf-8") as file:
            json.dump(qts, file, ensure_ascii=False)
def process(message):
    msg = message.json["text"]
    found = False
    call = message
    client = [message.chat.id, [msg,0,0,0,0,0,0], 0, 0, 0, 0, 0, ["–ò–º—è –§–∞–º–∏–ª–∏—è", "–ï–º–µ–π–ª", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"], 0, ["bot","instrument","bank","budushee","ne hvatilo"]]
    client_id = None

    for j,i in enumerate(clients):

        if i[0] == message.chat.id:
            found = True
            client = i
            client_id = j
            break

    if not found:
        analitics["n_starts"] += 1
        client_id = len(clients)
        clients.append(client)
        clients[client_id][1] = client[1]
        clients[client_id][2] = client[2]
    #–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∑–∞—è–≤–∫—É
    if msg == "–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å":
        clients[client_id][8] = 0
        clients[client_id][6] = 0
        clients[client_id][5] = 0
        clients[client_id][4] = 0
        clients[client_id][3] = 0
        clients[client_id][2] = 1
        clients[client_id][1] = [0,0,0,0,0,0,0]
        question_time[message.chat.id] = int(time.time())
        config.StartQuiz(message)

    elif msg == '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ':
        clients[client_id][8] = 0
        clients[client_id][6] = 0
        clients[client_id][5] = 0
        clients[client_id][4] = 0
        clients[client_id][2] = 1
        clients[client_id][3] = 0
        clients[client_id][1] = [0,0,0,0,0,0,0]
        question_time[message.chat.id] = int(time.time())
        config.StartQuiz(message)

    elif msg == '–í—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é ‚úîÔ∏è':
        clients[client_id][6] = 1
        config.callMeneger(message, clients[client_id])

    elif msg == '–ë–∞–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ üóÑ':
        clients[client_id][4] = 4
        analitics["instruments"]['–î–µ–ø–æ–∑–∏—Ç'][0] +=1
        config.givesDeposit(message)
    elif msg == '–ö–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –û–í–ì–ó üèõÔ∏è':
        clients[client_id][4] = 1
        analitics["instruments"]['–û–í–ì–ó'][0] +=1
        config.givesOVGZ(message, clients[client_id])
    elif msg == '–ö–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –ü–ò–§ üí∞':
        clients[client_id][4] = 2
        analitics["instruments"]['–ü–ò–§'][0] +=1
        config.givesPIF(message, clients[client_id])
    elif msg == '–ö–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è P2P üîó':
        clients[client_id][4] = 5
        analitics["instruments"]['P2P'][0] +=1
        config.givesP2P(message, clients[client_id])
    elif msg == '–ö–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –ù–ü–§ üë¥':
        clients[client_id][4] = 3
        analitics["instruments"]['–ù–ü–§'][0] +=1
        config.givesNPF(message, clients[client_id])
    elif msg == '–ö–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è IPO üé¢':
        clients[client_id][4] = 6
        analitics["instruments"]['IPO'][0] +=1
        config.givesIPO(message, clients[client_id])

    elif msg == '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç‚úñÔ∏è':
        clients[client_id][4] = 0
        clients[client_id][3] = 2 #–ß–µ–ª–æ–≤–µ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –ü–ª–æ—Ö–æ–µ
        config.Bad(message, clients[client_id][1])

    elif msg == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç':
        clients[client_id][4] = 0
        clients[client_id][3] = 1 #–ß–µ–ª–æ–≤–µ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –•–æ—Ä–æ—à–µ–µ
        a = config.EndQuiz(message, clients[client_id][1])
        if a is not None:
            edit_good(a)

    elif msg == '–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤':
        clients[client_id][4] = 0
        if clients[client_id][3] == 1 or clients[client_id][3] == 0:
            a = config.EndQuiz(message, clients[client_id][1])
            if a is not None:
                edit_good(a)

        elif clients[client_id][3] == 2:
            config.Bad(message, clients[client_id][1])


    elif msg == '–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–π':
        clients[client_id][5] = 0
        if clients[client_id][4] == 1:
            config.givesOVGZ(message, clients[client_id])

        elif clients[client_id][4] == 2:
            config.givesPIF(message, clients[client_id])

        elif clients[client_id][4] == 3:
            config.givesNPF(message, clients[client_id])

        elif clients[client_id][4] == 4:
            config.givesDeposit(message)

        elif clients[client_id][4] == 5:
            config.givesP2P(message, clients[client_id])

        elif clients[client_id][4] == 6:
            config.givesIPO(message, clients[client_id])

        else:
            bot.send_message(message.chat.id, "–ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑!", parse_mode="html")
            clients[client_id][8] = 0
            clients[client_id][6] = 0
            clients[client_id][5] = 0
            clients[client_id][4] = 0
            clients[client_id][3] = 0
            clients[client_id][2] = 1
            clients[client_id][1] = [0,0,0,0,0,0,0]
            question_time[message.chat.id] = int(time.time())
            config.StartQuiz(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Monobank":
        clients[client_id][5] = 16
        banks_analitics["Monobank"] += 1
        config.CallbackMonobankDeposit(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ê–ª—å—Ñ–∞–ë–∞–Ω–∫":
        clients[client_id][5] = 17
        banks_analitics["–ê–ª—å—Ñ–∞–ë–∞–Ω–∫"] += 1
        config.CallbackAlfaBankDeposit(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ê–≤–∞–ª—å–ë–∞–Ω–∫":
        clients[client_id][5] = 18
        banks_analitics["–ê–≤–∞–ª—å–ë–∞–Ω–∫"] += 1
        config.CallbackAvalDeposit(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –û–¢–ü –ë–∞–Ω–∫":
        clients[client_id][5] = 19
        banks_analitics["–û–¢–ü –ë–∞–Ω–∫"] += 1
        config.CallbackOTPBankDeposit(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ ICU UAH/USD":
        clients[client_id][5] = 1
        banks_analitics["ICU UAH/USD"] += 1
        config.CallbackICUUSDOVGZ(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ ICU UAH":
        clients[client_id][5] = 11
        banks_analitics["ICU UAH"] += 1
        config.CallbackICUPIF(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Freedom Finance  UAH/USD":
        clients[client_id][5] = 3
        banks_analitics["Freedom Finance UAH/USD"] += 1
        config.CallbackFFDUSDOVGZ(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Freedom Finance UAH":
        clients[client_id][5] = 2
        banks_analitics["Freedom Finance UAH"] += 1
        config.CallbackFFDUAHOVGZ(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ UNIVER  UAH/USD":
        clients[client_id][5] = 5
        banks_analitics["UNIVER UAH/USD"] += 1
        config.CallbackUNIVERUSDOVGZ(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ UNIVER UAH":
        clients[client_id][5] = 4
        banks_analitics["UNIVER UAH"] += 1
        config.CallbackUNIVERUAHOVGZ(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ DRAGON_CAPITAL UAH/USD":
        banks_analitics["Dragon Capital UAH/USD"] += 1
        clients[client_id][5] = 7
        config.CallbackDragonCapitalUSDOVGZ(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ DRAGON UAH":
        clients[client_id][5] = 6
        banks_analitics["Dragon UAH"] += 1
        config.CallbackDragonCapitalUAHOVGZ(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ HUGS":
        clients[client_id][5] = 9
        banks_analitics["HUGS"] += 1
        config.CallbackHUGSPIF(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ UNIVER":
        clients[client_id][5] = 8
        banks_analitics["Univer"] += 1
        config.CallbackUNIVERPIF(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ ICU":
        banks_analitics["ICU"] += 1
        clients[client_id][5] = 12
        config.CallbackICUNPF(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ OTP CAPITAL":
        clients[client_id][5] = 10
        banks_analitics["OTP Capital"] += 1
        config.CallbackOTPCapitalPIF(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –õ–∏–≥–∞ –ü–µ–Ω—Å–∏—è":
        banks_analitics["–õ–∏–≥–∞ –ü–µ–Ω—Å–∏—è"] += 1
        clients[client_id][5] = 14
        config.CallbackLigaPensijaNPF(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ OTP":
        banks_analitics["OTP"] += 1
        clients[client_id][5] = 13
        config.CallbackOTPNPF(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ KINTO":
        banks_analitics["Kinto"] += 1
        clients[client_id][5] = 15
        config.CallbackKINTONPF(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ FREEDOMFINANCE":
        banks_analitics["Freedom Finance"] += 1
        clients[client_id][5] = 20
        config.CallbackFFDIPO(message)

    elif msg == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ FINHUB":
        banks_analitics["FinHub"] += 1
        clients[client_id][5] = 21
        config.CallbackFinhubP2P(message)

    elif clients[client_id][6] != 0:
        if clients[client_id][6] == 1:
            clients[client_id][6] = 2
            clients[client_id][7][0] = msg

            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ —Å–≤–æ–π Email", parse_mode="html")
            #Name/Surname
        elif clients[client_id][6] == 2:
            clients[client_id][6] = 3
            clients[client_id][7][1] = msg
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", parse_mode="html")
            #Email
        elif clients[client_id][6] == 3:
            clients[client_id][6] = 4
            clients[client_id][7][2] = msg
            analitics["n_callMeneger"] += 1
            analitics["analitics_feedback"] += 1
            config.send_to_Menneger(message, clients[client_id])
            #telephone
        elif clients[client_id][6] == 4 and clients[client_id][8] != 2:
            if msg == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ":
                clients[client_id][8] = 1
                clients[client_id][6] = 5
                markup = ReplyKeyboardMarkup(True)
                markup.row(KeyboardButton("–î–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚úÖ"))
                markup.row(KeyboardButton("–ù–µ—Ç, —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª—å—à–µ ‚ùå "))
                bot.send_message(message.chat.id, "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–µ–±–µ –±—ã–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã‚ùì", reply_markup = markup, parse_mode="html")
            elif msg == "–ù–µ—Ç, –Ω–µ —Å–µ–π—á–∞—Å":
                clients[client_id][8] = 2
                markup = ReplyKeyboardMarkup(True)
                bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! <b>May the dollar bill be with you!</b>", reply_markup = ReplyKeyboardRemove(), parse_mode="html")
            #–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞

        elif clients[client_id][6] == 5 and clients[client_id][8] == 1:
            clients[client_id][9][0] = msg
            if msg not in callback_analitics:
                callback_analitics[0][msg] = 1
            else:
                callback_analitics[0][msg] += 1
            clients[client_id][6] = 6
            markup = ReplyKeyboardMarkup(True)
            markup.row(KeyboardButton("–î–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚úÖ"))
            markup.row(KeyboardButton("–ù–µ—Ç, —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª—å—à–µ ‚ùå"))
            bot.send_message(message.chat.id, "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–µ–±–µ –±—ã–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã‚ùì", reply_markup = markup, parse_mode="html")

        elif clients[client_id][6] == 6 and clients[client_id][8] == 1:
            clients[client_id][6] = 7
            clients[client_id][9][1] = msg
            if msg not in callback_analitics:
                callback_analitics[1][msg] = 1
            else:
                callback_analitics[1][msg] += 1
            markup = ReplyKeyboardMarkup(True)
            markup.row(KeyboardButton("–î–∞ ‚úÖ"))
            markup.row(KeyboardButton("–ù–µ—Ç ‚ùå"))
            bot.send_message(message.chat.id, "–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è/–≤–æ—Å–ø–æ–ª—å–∑—É–µ—à—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–ø–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–ø–∏—Å–∞–Ω—ã –≤—ã—à–µ‚ùì", reply_markup = markup, parse_mode="html")

        elif clients[client_id][6] == 7 and clients[client_id][8] == 1:
            clients[client_id][9][2] = msg
            if msg not in callback_analitics:
                callback_analitics[2][msg] = 1
            else:
                callback_analitics[2][msg] += 1
            clients[client_id][6] = 8
            bot.send_message(message.chat.id, "–ü–æ–¥—Å–∫–∞–∂–∏ –Ω–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–∏—è—Ö / –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ‚ùì", reply_markup = ReplyKeyboardRemove(), parse_mode="html")

        elif clients[client_id][6] == 8 and clients[client_id][8] == 1:
            clients[client_id][6] = 9
            clients[client_id][9][3] = msg
            if msg not in callback_analitics:
                callback_analitics[3][msg] = 1
            else:
                callback_analitics[3][msg] += 1
            bot.send_message(message.chat.id, "–í–∞—É, —Å–ø–∞—Å–∏–±–æ! –≠—Ç–æ –º–Ω–µ –æ—á–µ–Ω—å –ø–æ–º–æ–∂–µ—Ç –≤ –±—É–¥—É—â–µ–º! üòº–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ ‚Äì –ø–∏—à–∏ @Franklin_faq, –æ–Ω –±—É–¥–µ—Ç —Ä–∞–¥ –≤—Å–µ –≤—ã—Å–ª—É—à–∞—Ç—å :)", parse_mode="html")
            config.send_review(message, clients[client_id])

            pd.DataFrame(callback_analitics)
        else:
            clients[client_id][8] = 0
            clients[client_id][6] = 0
            clients[client_id][5] = 0
            clients[client_id][4] = 0
            clients[client_id][3] = 0
            clients[client_id][2] = 1
            clients[client_id][1] = [0,0,0,0,0,0,0]
            question_time[message.chat.id] = int(time.time())
            config.StartQuiz(message)


    elif clients[client_id][3] == 0:

        if msg == '–ù–∞–∑–∞–¥üîô':
            clients[client_id][2] += -1
        else:
            #–í—ã–≤–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ –ø—Ä–æ—à–ª—ã–º –≤–æ–ø—Ä–æ—Å–æ–º.
            #–î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ø–∏—Å–æ–∫
            clients[client_id][2] += 1
        if clients[client_id][2] <= 1:
            clients[client_id][8] = 0
            clients[client_id][6] = 0
            clients[client_id][5] = 0
            clients[client_id][4] = 0
            clients[client_id][3] = 0
            clients[client_id][2] = 1
            clients[client_id][1] = [0,0,0,0,0,0,0]
            question_time[message.chat.id] = int(time.time())
            config.StartQuiz(message)

        elif clients[client_id][2] == 2:
            question_time_analitics[0].append(int(time.time()) - question_time[message.chat.id])
            clients[client_id][1][0] = msg
            print(qts)
            if msg == questions[0][0]:
                qts['qt1'][0] += 1
            elif msg == questions[0][1]:
                qts['qt1'][1] += 1
            elif msg == questions[0][2]:
                qts['qt1'][2] += 1
            else:
                qts['qt1'][3] += 1
            question_time[message.chat.id] = int(time.time())
            config.secondQuestion(message)

        elif clients[client_id][2] == 3:
            question_time_analitics[1].append(int(time.time()) - question_time[message.chat.id])
            clients[client_id][1][1] = msg
            if msg == questions[1][0]:
                qts['qt2'][0] += 1
            elif msg == questions[1][1]:
                qts['qt2'][1] += 1
            elif msg == questions[1][2]:
                qts['qt2'][2] += 1
            else:
                qts['qt2'][3] += 1
            question_time[message.chat.id] = int(time.time())
            config.thirdQuestion(message)

        elif clients[client_id][2] == 4:
            question_time_analitics[2].append(int(time.time()) - question_time[message.chat.id])
            clients[client_id][1][2] = msg
            if msg == questions[2][0]:
                qts['qt3'][0] += 1
            elif msg == questions[2][1]:
                qts['qt3'][1] += 1
            elif msg == questions[2][2]:
                qts['qt3'][2] += 1
            else:
                qts['qt3'][3] += 1
            question_time[message.chat.id] = int(time.time())
            config.fourthQuestion(message)

        elif clients[client_id][2] == 5:
            question_time_analitics[3].append(int(time.time()) - question_time[message.chat.id])
            clients[client_id][1][3] = msg
            if msg == questions[3][0]:
                qts['qt4'][0] += 1
            else:
                qts['qt4'][1] += 1
            question_time[message.chat.id] = int(time.time())
            config.fifthQuestion(message)

        elif clients[client_id][2] == 6:
            question_time_analitics[4].append(int(time.time()) - question_time[message.chat.id])
            clients[client_id][1][4] = msg
            if msg == questions[4][0]:
                qts['qt5'][0] += 1
            elif msg == questions[4][1]:
                qts['qt5'][1] += 1
            elif msg == questions[4][2]:
                qts['qt5'][2] += 1
            else:
                qts['qt5'][3] += 1
            question_time[message.chat.id] = int(time.time())
            config.sixthQuestion(message)

        elif clients[client_id][2] == 7:
            question_time_analitics[5].append(int(time.time()) - question_time[message.chat.id])
            clients[client_id][1][5] = msg
            if msg == questions[5][0]:
                qts['qt6'][0] += 1
            else:
                qts['qt6'][1] += 1
            question_time[message.chat.id] = int(time.time())
            config.seventhQuestion(message)

        elif clients[client_id][2] > 7:
            question_time_analitics[6].append(int(time.time()) - question_time[message.chat.id])
            clients[client_id][2] = 0
            clients[client_id][1][6] = msg
            clients[client_id][3] = 1 #–ß–µ–ª–æ–≤–µ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –•–æ—Ä–æ—à–µ–µ
            if msg == questions[6][0]:
                qts['qt7'][0] += 1
            elif msg == questions[6][1]:
                qts['qt7'][1] += 1
            elif msg == questions[6][2]:
                qts['qt7'][2] += 1
            else:
                qts['qt7'][3] += 1
            question_time[message.chat.id] = int(time.time())
            a = config.EndQuiz(message, clients[client_id][1])
            if a is not None:
                edit_good(a)

    else:
        bot.send_message(message.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é", parse_mode="html")

    if message.json['text'] == 'get_id':
        text_to_message = "User ID - " + str(message.from_user.id) + "\nChat ID - " + str(message.chat.id)
        bot.reply_to(message, text_to_message)




def start():
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
        bot.polling(none_stop=True)
    finally:
        bot.polling(none_stop=True)

while True:
    print("Bot running")
    start()

